
#### 技術

###### Reactコンポーネントのデザイン

Reactコンポーネントのデザイン経験（単一責任の原則など）やReactとReduxを使用した開発設計の経験があります

Reduxを使用する基本的なステップを簡潔に説明します：

1. **ストアの作成**： Reduxでは、アプリケーションのすべての状態を「ストア」と呼ばれる一つの大きなオブジェクトで管理します。ストアを作成することで、状態を一箇所で扱うことができます。
2. **アクションの定義**： 状態を変更するためのアクションを定義します。アクションは、「何をするか」を記述するオブジェクトで、通常はタイプ（type）プロパティを含みます。
3. **リデューサーの作成**： アクションが発行されたときに状態の更新をどのように行うかを定義する関数を「リデューサー」と呼びます。リデューサーは、現在の状態とアクションを受け取り、新しい状態を返します。
4. **アクションの発行**： アプリケーションのどこかでアクションを「ディスパッチ」することにより、ストアに保存されている状態を更新します。

###### typescript

静的型付け、￥コードを実行する前、コンパイルの段階でエラーの検出ができるように改良されました。これによって、プログラムの動作がより安定します。　大規模　長期的なプロジェクトのメンテナンスが容易になります。多くのモダンな開発ツールやライブラリがTypeScriptの利用を前提に設計されています。これにより、より堅牢な開発環境を構築することができます。Tailwind、CSS-in-JS

TDD　**まずテストコードを書いた後にそのテストをパスするようにプロダクト本体を実装する開発手法**

技术提案，具体的内容，比如flask

从零开始，如果是你会怎么选fmamewolk比如github上的star，上传的频率来选

vue和react的区别

vue的生命周期beforecreate，create，mounted，update，unmonted

react的生命周期

axios

[JavaScript](https://kinsta.com/jp/knowledgebase/what-is-javascript/#what-is-javascript)バンドラー webpack

JavaScriptのモジュール化が可能。複数のJavaScriptファイルを一つまたは数個のバンドルにまとめることで、HTTPリクエストの数を減らし、ロード時間を短縮します。

Viteは、ESモジュールを利用してブラウザで直接モジュールを読み込むため、初期のサーバー起動が非常に速く

非同期処理では、特定の処理が完了するのを待たずに次の処理を進めることができます。例えば、サーバーからのデータ取得やファイル読み込みなど、時間がかかる処理をバックグラウンドで実行し、その完了を待っている間に他のスクリプトを実行することができます。

cicd

eslint JavaScriptのコードが規約に沿って書かれているか、指定したルールに違反していないかをチェックをして指摘や修正をしてくれる静的解析ツールです。

###### DB

テーブル設計の際に気をつけたこと

1. **正規化**：データの冗長性を避け、効率的なデータ管理を実現するために、適切に正規化を行います。
2. **インデックスの最適化**：クエリのパフォーマンス向上のために、必要な箇所にインデックスを設定します。
3. **データ整合性**：外部キー制約などを用いてデータの整合性を保ちます。

###### レビュー

1. **品質の確保**：コードが要件を満たしているか、バグがないかを確認します。重複していない
2. **可読性**：他の開発者が理解しやすいように、清潔で整理されたコードを心がけます。、命名の観点で気をつけること
3. **ドキュメント**：コードに適切なコメントを付け、ドキュメントを整備しています。

コンポーネントは1つの責任を持つように設計されているか、keyは一意であるか 同じidは使用しないようにする、型とデータの順番は合っているか、CSS重複していないか、対象のページの見た目

**コードの品質を保つためにしてること**

- レビュアーの勉強会(レビュー観点など)
  - 実装力よりレビューで漏れを出さない方が成果に対して手っ取り早い
- コーディング規約の定期的な見直し

**URLが入力されてブラウザに表示されるまでの流れを説明をしてください。**

1、DNSサーバーにドメインを問い合わせる

2、DNSサーバーからブラウザにIPアドレスが返ってくる

3、そのIPアドレスのWEBサーバーにデータを要求

4、WEBサーバーからHTMLやCSS等のデータが返ってきて表示される。

クッキー (Cookie)

クッキーは、サーバーからクライアント（ユーザーのブラウザ）に送られ、ブラウザに小さなデータファイルとして保存される情報のことです。クッキーの主な特徴は以下の通りです：

- **クライアント側で保存される**：ユーザーのデバイスに直接保存されるため、情報はブラウザを閉じても持続します。
- **自動送信**：一度クッキーが設定されると、その後の全てのリクエストに自動的にクッキーが含まれ、サーバーに送信されます。
- **容量制限**：クッキーは、そのサイズが比較的小さい（一般的には4KBまで）です。
- **セキュリティ**：クッキーはセキュリティ上の懸念があるため、重要な情報を保存する場合には適切な暗号化が必要です。また、クロスサイトリクエストフォージェリ（CSRF）などの脆弱性に対処するための設定が必要です。

セッション (Session)

セッションは、サーバー側でユーザーの状態を保持する仕組みです。セッションの特徴は以下の通りです：

- **サーバー側での保存**：ユーザーの情報はサーバー上に保存されるため、クライアントにはセッションIDのみが渡されます。これにより、セキュリティが向上します。
- **有効期限の設定**：セッションは一定時間の活動がない場合やブラウザが閉じられると終了することが一般的です。
- **情報容量**：セッションはクッキーより多くの情報を保存することができます。データはサーバー側にあるため、クライアントのリソースを消費しません。
- **利用の適応性**：ログイン情報などのセンシティブなデータを扱う場合に適しています。
